---------- MongoDB on coursera

https://www.coursera.org/learn/introduction-to-mongodb/home/module/3

Email : olivierinn.kouame@gmail.com

Module 1 ---------------------------------------------------------

On MongoDB Atlas : https://cloud.mongodb.com/v2/6859a52156f6810bac94e08b#/clusters
user 			 : admin/graces


You can conn to mongodb using :

	- Mongoshell
	- Application   : You conn to an app using a driver for app (ex: Nodejs v4.1)
	- Mongo compass
	
NB: Connexion string is similar for these 3 types of conn.

Conn string syntaxe : 

	- Using DNS list / standard format 	
	
		mongodb+srv://<username>:<password>@cluster0.usqsf.mongodb.net/?retryWrites=true&w=majority
		
		Default port : 27017 if not specified in the conn string 

	- Using shell: 
	
		Download and install mongosh from mongodb atlas gui. Add install path in env path 

		$mongosh "mongodb+srv://cluster0.2ngnvn9.mongodb.net/myFirstDatabase" --apiVersion 1 --username admin
		
		C:\Users\oline>mongosh "mongodb+srv://cluster0.3uxvs59.mongodb.net/" --apiVersion 1 --username admin
	
		Enter password: ******
		Current Mongosh Log ID: 6859fa2f4782639937748a5e
		Connecting to:          mongodb+srv://<credentials>@cluster0.3uxvs59.mongodb.net/?appName=mongosh+2.5.3
		Using MongoDB:          8.0.10 (API Version 1)
		Using Mongosh:          2.5.3

		For mongosh info see: https://www.mongodb.com/docs/mongodb-shell/

		Atlas atlas-qf340v-shard-0 [primary] test>
			
	- 
	C:\Users\oline\AppData\Local\Programs\mongosh\
	
Module 2 ---------------------------------------------------------

  Document object 
  
  Mongodb stores data in documents which are stored as bson. 
  Compared to json, bson stores other data types like date, objectid and other data types 
  Mongo supports polymorphic data : files and value types can vary across docs within a collection  
  
Mongosh ------------------------------------------------

In Atlas, click on Cluster -> Connect to download and install : Mongosh

Mongosh is a shell to access mongodb cluster as psql 

	conn string: mongosh "mongodb+srv://cluster0.ptmr17.mongodb.net/" --apiVersion 1 --username admin
	  
	Open a dos or other terminal. Check mongosh is known in the env.
	
	run:
		
	C:\Users\oline>mongosh "mongodb+srv://cluster0.ptmr17.mongodb.net/" --apiVersion 1 --username admin
	Enter password: ******
	Current Mongosh Log ID: 6902748933be90de87cebea3
	Connecting to:          mongodb+srv://<credentials>@cluster0.ptmr17.mongodb.net/?appName=mongosh+2.5.8
	Using MongoDB:          8.0.15 (API Version 1)
	Using Mongosh:          2.5.8

	For mongosh info see: https://www.mongodb.com/docs/mongodb-shell/

	Atlas atlas-x0mu64-shard-0 [primary] test> const greetingArray = ["hello", "world", "welcome"];
	Atlas atlas-x0mu64-shard-0 [primary] test> const loopArray = (array) => array.forEach(el => console.log(el));
	Atlas atlas-x0mu64-shard-0 [primary] test> loopArray(greetingArray);
		hello
		world
		welcome

Mongodb compass ---------------------------------------------	

Mongodb compass: GUI you can use to connect to cluster0 created in atlas.  It is a gui like SQL Developer

For drivers, go to: mongodb.com/doc/drivers 

CRUD ---------------------------------------------------

insertOne()

	db.<collection>.insertOne()
	db.grades.insertOne()
	
	Atlas atlas-4e9k8f-shard-0 [primary] training> db.grades.insertOne( {
			student_id: 546799,
				scores: [
					{type: "quiz",
					 score: 50,
					},
					{type: "homework",
					score: 70,
					}
					]
					
				{
				acknowledged: true,
				insertedId: ObjectId("62f138664985719fd9fb98f6")
				}

	Atlas atlas-4e9k8f-shard-0 [primary] training>


insertMany()

	db.<collection>.insertMany([
		<document 1>,
		<document 2>,
		<document 3>
	 ])
	 
	 Atlas atlas-4e9k8f-shard-0 [primary] training> db.grades.insertMany([
			{student_id: 546789,
			scores: [
				{type: "quiz",
				score: 50,},
				{type: "homework",
				score: 70,}
				],
			  class_id:551,
			  },
			{student_id: 777777,
			scores: [
			{type: "quiz",
			score: 72,}
			}
			]
		  )
		  
NB: If we don''t specify the id of the document inserted, mongodb will generate if for you automatically 


find() ------------------------

find all elts in a collection 
	use training
	db.<collection>.find()	
	ex: db.zips.find()
	
Find a Document with Equality

	When given equality with an _id field, the find() command will return the specified document that 
	matches the _id. 
	
	ex: db.zips.find({ _id: ObjectId("5c8eccc1caa187d17ca6ed16") })
	
To find a specific document 
	
	{ field: { $eq: <value> } }
	{ field: <value> }
	
	ex: db.zips.find({ state: "AZ" })   : Docs in state Arizona
	
$in operator ----------------------------------------

The $in operator allows us to select all documents that have a field value equal to any of the values
specified in the array

	db.<collection>.find({
		<field>: { $in:
		[<value>, <value>, ...]
		}
		})

	ex: db.zips.find({ city: { $in: ["PHOENIX", "CHICAGO"] } })

$gt -----------

	Use the $gt operator to match documents with a field greater than the given value. 
	ex: db.sales.find({ "items.price": { $gt: 50}})

$lt
	Use the $lt operator to match documents with a field less than the given value. 
	db.sales.find({ "items.price": { $lt: 50}})
	
$lte
	Use the $lte operator to match documents with a field less than or equal to the given value
	ex: db.sales.find({ "customer.age": { $lte: 65}})
	
$gte

	Usethe $gte operator to match documents with a field greater than or equal to the given value. 
	ex: db.sales.find({ "customer.age": { $gte: 65}})

Find Documents with an Array That Contains a Specified Value

	In the following example, "InvestmentFund" is not enclosed in square brackets, so MongoDB returns all 
	documeants within the products array that contain the specified value.

	ex: db.accounts.find({ products: "InvestmentFund"})

Find a Document by Using the $elemMatch Operator

	Use the $elemMatch operator to find all documents that contain the specified subdocument.
	
	ex: db.sales.find({
		items: {
			$elemMatch: { name: "laptop", price: { $gt: 800 }, quantity: { $gte: 1 } },
			},
		})

$and  ------------------

	Use implicit $and to select documents that match multiple expressions. 
	
	ex: db.routes.find({ "airline.name": "Southwest Airlines", stops: { $gte: 1 } })

$or  --------------------

Use the $or operator to select documents that match at least one of the included expressions. 
	
	db.routes.find({
	  $or: [{ dst_airport: "SEA" }, { src_airport: "SEA" }],
	})

